name: Nginx Preview Deployment

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Preview App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SSHPass
        run: sudo apt-get install -y sshpass

      - name: Add server to known_hosts
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "14"

      - name: Install Node.js dependencies
        run: npm install

      - name: Install Python
        run: sudo apt-get install -y python3 python3-pip

      - name: Install Python dependencies
        run: |
          pip3 install -r requirements.txt

      - name: Deploy to Nginx server using the same Python interpreter
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          PREVIEW_DOMAIN: ${{ secrets.PREVIEW_DOMAIN }}
        run: |
          # Set deployment directory to /var/www/preview
          DEPLOY_DIR="/var/www/preview"

          echo "Deploying to: ${DEPLOY_DIR}"

          # Create deployment directory on the server
          sshpass -p $SSH_PASSWORD ssh ${SSH_USERNAME}@${SSH_HOST} "sudo mkdir -p ${DEPLOY_DIR}"

          # Archive and copy the project
          tar -czf deploy.tar.gz *
          sshpass -p $SSH_PASSWORD scp deploy.tar.gz ${SSH_USERNAME}@${SSH_HOST}:${DEPLOY_DIR}/

          # Extract and deploy the archive on the remote server
          sshpass -p $SSH_PASSWORD ssh ${SSH_USERNAME}@${SSH_HOST} "
            sudo chown -R nodeuser:nodeuser ${DEPLOY_DIR} &&
            cd ${DEPLOY_DIR} &&
            tar -xzf deploy.tar.gz
          "

      # Use the specific Python interpreter from the shebang
      - name: Start Python Application using /opt/miniconda3/bin/python
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
        run: |
          sshpass -p $SSH_PASSWORD ssh ${SSH_USERNAME}@${SSH_HOST} "
            /opt/miniconda3/bin/python ${DEPLOY_DIR}/app.py
          "
