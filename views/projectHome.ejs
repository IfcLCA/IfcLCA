<!DOCTYPE html>
<html lang="en">
  <%- include('partials/_head.ejs') %>
  <head>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <link
      href="https://cdn.jsdelivr.net/npm/tabulator-tables/dist/css/tabulator.min.css"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/tabulator-tables/dist/js/tabulator.min.js"></script>
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
      rel="stylesheet"
    />
    <!-- Load Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Custom CSS -->
    <style>
      .project-container {
        display: flex;
        align-items: left;
        gap: 20px;
        width: 100%;
      }

      .details-container {
        flex: 1;
        min-width: 250px;
      }

      .charts-container {
        flex: 3;
        display: flex;
        justify-content: space-between;
        gap: 10px;
        max-width: 100%;
      }

      .chart-column {
        flex: 1;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 10px;
        max-width: 100%;
      }

      .chart-container {
        width: 100%;
      }

      .btn-container {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
        margin-bottom: 20px;
      }

      .editbtn-container {
        display: flex;
        gap: 10px;
        justify-content: flex-start;
        margin-bottom: 20px;
      }

      @media (max-width: 1200px) {
        .project-container {
          flex-direction: column;
        }

        .charts-container {
          flex-direction: column;
        }

        .chart-column {
          max-width: 100%;
        }
      }

      /* Viewer Styles */
      #container {
        position: relative;
        width: 100%;
        height: 400px;
      }
      #myCanvas {
        width: 100%;
        height: 100%;
        background: lightblue;
        background-image: linear-gradient(lightblue, white);
      }
      #modelTree {
        position: absolute;
        top: 10px;
        left: 10px;
        width: 300px;
        max-height: 400px;
        overflow-y: auto;
        background: rgba(240, 240, 240, 0.9);
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 10px;
        z-index: 20;
      }
      #uploadButton {
        position: fixed;
        top: 10px;
        right: 10px;
        z-index: 10;
        background-color: #4caf50;
        color: white;
        padding: 10px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }
    </style>
  </head>
  <body>
    <%- include('partials/_header.ejs', { hasProjects: false }) %>
    <main role="main" class="container mt-4">
      <!-- Existing Project Information and Charts -->
      <div class="project-container">
        <div class="details-container">
          <h2 id="project-name">
            <%= formatProjectNameForDisplay(project.name) %>
          </h2>
          <p>Phase: <%= project.phase %></p>
          <p>Description: <%= project.description %></p>
          <p>
            Carbon Footprint:
            <span id="carbonFootprint"
              ><%= formatNumber(Math.round(project.totalCarbonFootprint) / 1000,
              1) %> tons</span
            >
          </p>
          <p>
            m²:
            <strong id="ebfPerM2"
              ><%= formatNumber(project.EBF, 0) %> m²</strong
            >
          </p>
          <p>
            CO₂-eq / m²:
            <strong id="co2PerM2"
              ><%= formatNumber(project.co2PerSquareMeter, 1) %> kg</strong
            >
          </p>
          <div class="editbtn-container">
            <a
              href="/projects/<%= project._id %>/edit"
              id="btn-edit-project"
              class="btn btn-primary"
              data-toggle="tooltip"
              title="Change the project details"
              >Edit Project</a
            >
          </div>
        </div>
        <div class="charts-container">
          <div class="chart-column">
            <div class="chart-container">
              <canvas id="co2Chart" width="auto" height="120"></canvas>
            </div>
          </div>
          <div class="chart-column">
            <div class="chart-container">
              <canvas id="bubbleChart" width="auto" height="120"></canvas>
            </div>
          </div>
        </div>
      </div>

      <!-- IFC Viewer -->
      <div id="container">
        <canvas id="myCanvas"></canvas>
        <div id="modelTree"></div>
      </div>
      <input type="file" id="uploadButton" accept=".ifc" />
    </main>
    <%- include('partials/_footer.ejs') %>
    <script src="https://cdn.jsdelivr.net/npm/tabulator-tables/dist/js/tabulator.min.js"></script>
    <script src="/js/uploadIfc.js"></script>
    <script src="/js/projectTable.js"></script>
    <% function formatNumber(value, decimals) { %> <% if (value == null ||
    isNaN(value)) return '0'; %> <% return Number(value).toLocaleString('de-CH',
    { minimumFractionDigits: decimals, maximumFractionDigits: decimals }); %> <%
    } %>

    <!-- Initialize tooltips -->
    <script>
      $(function () {
        $('[data-toggle="tooltip"]').tooltip();
      });
    </script>
    <script type="module">
      import {
        Viewer,
        WebIFCLoaderPlugin,
        TreeViewPlugin,
      } from "https://cdn.jsdelivr.net/npm/@xeokit/xeokit-sdk/dist/xeokit-sdk.es.min.js";
      import * as WebIFC from "https://cdn.jsdelivr.net/npm/web-ifc@0.0.51/web-ifc-api.js";

      // Initialize Viewer
      const viewer = new Viewer({
        canvasId: "myCanvas",
        transparent: true,
      });

      // Set up the camera
      viewer.camera.eye = [-3.933, 2.855, 27.018];
      viewer.camera.look = [4.4, 3.724, 8.899];
      viewer.camera.up = [-0.018, 0.999, 0.039];

      // Initialize WebIFC API
      const IfcAPI = new WebIFC.IfcAPI();
      IfcAPI.SetWasmPath("https://cdn.jsdelivr.net/npm/web-ifc@0.0.51/");

      let currentModel = null;

      IfcAPI.Init().then(() => {
        const webIFCLoader = new WebIFCLoaderPlugin(viewer, {
          WebIFC,
          IfcAPI,
        });

        const treeView = new TreeViewPlugin(viewer, {
          containerElement: document.getElementById("modelTree"),
          autoExpandDepth: 2,
        });

        const loadIFCModel = (arrayBuffer) => {
          if (currentModel) {
            currentModel.destroy();
            treeView.removeModel(currentModel.id);
          }

          const model = webIFCLoader.load({
            id: "uploadedModel",
            ifc: arrayBuffer,
            edges: true,
            loadMetadata: true,
          });

          model.on("loaded", () => {
            currentModel = model;
            viewer.cameraFlight.flyTo({
              worldAABB: model.worldAABB,
            });
          });

          model.on("error", (error) => {
            console.error("Failed to load IFC model:", error);
          });
        };

        document
          .getElementById("uploadButton")
          .addEventListener("change", function (event) {
            const file = event.target.files[0];
            if (file && file.name.endsWith(".ifc")) {
              const reader = new FileReader();
              reader.onload = function (e) {
                const arrayBuffer = e.target.result;
                loadIFCModel(arrayBuffer);
              };
              reader.readAsArrayBuffer(file);
            } else {
              alert("Please upload a valid IFC file.");
            }
          });
      });
    </script>
  </body>
</html>
